package me.ionar.salhack.module.exploit;

import me.ionar.salhack.SalHack;
import me.ionar.salhack.events.network.EventNetworkPacketEvent;
import me.ionar.salhack.module.Module;
import me.ionar.salhack.module.Value;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.init.Items;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.SPacketEntityTeleport;
import net.minecraft.network.play.server.SPacketEntityVelocity;
import net.minecraft.network.play.server.SPacketMaps;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.world.storage.MapData;
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener;

public class PlayerTracker extends Module {


  public final Value<Float> amountPerTick = new Value<Float>("PacketsPerTick", new String[] {"PPS"}, "Cool stuff", 1.0f, 0.0f, 5.0f, 1.0f);
    public PlayerTracker()
    {
        super("PlayerTracker", new String[] {"PlayerTracker"}, "Player Tracker, thanks to Ace_ 2b2t for leaking this uwu", "NONE", 0xDB2441, ModuleType.EXPLOIT);
    }


    public void onUpdate() {
        if (mc.player.inPortal && mc.player.getRidingEntity() instanceof EntityBoat) {
            if (mc.player.inventory.getCurrentItem().getItem().equals(Items.MAP))
                mc.player.connection.sendPacket(new CPacketPlayerTryUseItemOnBlock(mc.player.getPosition(), EnumFacing.UP, EnumHand.MAIN_HAND, 0, -1337.77f, 0));
            for (int i = 0; i < amountPerTick.getValInt(); i++) {
                mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, -1337.77D, mc.player.posZ, false));
                mc.player.connection.sendPacket(new CPacketSteerBoat(false, true));


            }
        }
        for (Entity entity : mc.world.playerEntities) {
            if (!entity.getName().equalsIgnoreCase(mc.player.getName())) {
                SendMessage("EZZZZZZZZZZ, just found a dumb fuck! " + entity.getPosition());
            }
        }
    }

    @Listener
    public void onUpdate(EventNetworkPacketEvent.ReceivePacket event) {
        if (event.getPacket() instanceof SPacketMaps) {
            ((SPacketMaps) event.getPacket()).setMapdataTo(new MapData("haha i get ur coords"));
        }
        if (event.getPacket() instanceof SPacketEntityVelocity || event.getPacket() instanceof SPacketEntityTeleport) {
            event.setCanceled(true);
        }
    }

    @Listener
    public void onUpdate(EventNetworkPacketEvent.SendPacket event) {
        if (event.getPacket() instanceof CPacketConfirmTeleport || event.getPacket() instanceof CPacketPlayerTryUseItem) {
            event.setCanceled(true);
        }
    }
}
